note
 description:"[
		Slack Web API
 		One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
  		The version of the OpenAPI document: 1.7.0
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	FILES_REMOTE_API

inherit

    API_I


feature -- API Access


	files_remote_add (token: STRING_32; external_id: STRING_32; title: STRING_32; filetype: STRING_32; external_url: STRING_32; preview_image: STRING_32; indexable_file_contents: STRING_32): detachable STRING_TABLE [ANY]
			-- 
			-- Adds a file from a remote service
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional, default to null)
			-- 
			-- argument: external_id Creator defined GUID for the file. (optional, default to null)
			-- 
			-- argument: title Title of the file being shared. (optional, default to null)
			-- 
			-- argument: filetype type of file (optional, default to null)
			-- 
			-- argument: external_url URL of the remote file. (optional, default to null)
			-- 
			-- argument: preview_image Preview of the document via &#x60;multipart/form-data&#x60;. (optional, default to null)
			-- 
			-- argument: indexable_file_contents A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file. (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/files.remote.add"

			if attached token as l_token then
				l_request.add_form(l_token,"token");
			end
			if attached external_id as l_external_id then
				l_request.add_form(l_external_id,"external_id");
			end
			if attached title as l_title then
				l_request.add_form(l_title,"title");
			end
			if attached filetype as l_filetype then
				l_request.add_form(l_filetype,"filetype");
			end
			if attached external_url as l_external_url then
				l_request.add_form(l_external_url,"external_url");
			end
			if attached preview_image as l_preview_image then
				l_request.add_form(l_preview_image,"preview_image");
			end
			if attached indexable_file_contents as l_indexable_file_contents then
				l_request.add_form(l_indexable_file_contents,"indexable_file_contents");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/x-www-form-urlencoded">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	files_remote_info (token: STRING_32; file: STRING_32; external_id: STRING_32): detachable STRING_TABLE [ANY]
			-- 
			-- Retrieve information about a remote file added to Slack
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional, default to null)
			-- 
			-- argument: file Specify a file by providing its ID. (optional, default to null)
			-- 
			-- argument: external_id Creator defined GUID for the file. (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/files.remote.info"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "token", token));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "file", file));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "external_id", external_id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	files_remote_list (token: STRING_32; channel: STRING_32; ts_from: REAL_32; ts_to: REAL_32; limit: INTEGER_32; cursor: STRING_32): detachable STRING_TABLE [ANY]
			-- 
			-- Retrieve information about a remote file added to Slack
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional, default to null)
			-- 
			-- argument: channel Filter files appearing in a specific channel, indicated by its ID. (optional, default to null)
			-- 
			-- argument: ts_from Filter files created after this timestamp (inclusive). (optional, default to null)
			-- 
			-- argument: ts_to Filter files created before this timestamp (inclusive). (optional, default to null)
			-- 
			-- argument: limit The maximum number of items to return. (optional, default to null)
			-- 
			-- argument: cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/files.remote.list"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "token", token));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "channel", channel));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ts_from", ts_from));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "ts_to", ts_to));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "cursor", cursor));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	files_remote_remove (token: STRING_32; file: STRING_32; external_id: STRING_32): detachable STRING_TABLE [ANY]
			-- 
			-- Remove a remote file.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional, default to null)
			-- 
			-- argument: file Specify a file by providing its ID. (optional, default to null)
			-- 
			-- argument: external_id Creator defined GUID for the file. (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/files.remote.remove"

			if attached token as l_token then
				l_request.add_form(l_token,"token");
			end
			if attached file as l_file then
				l_request.add_form(l_file,"file");
			end
			if attached external_id as l_external_id then
				l_request.add_form(l_external_id,"external_id");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/x-www-form-urlencoded">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	files_remote_share (token: STRING_32; file: STRING_32; external_id: STRING_32; channels: STRING_32): detachable STRING_TABLE [ANY]
			-- 
			-- Share a remote file into a channel.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;remote_files:share&#x60; (optional, default to null)
			-- 
			-- argument: file Specify a file registered with Slack by providing its ID. Either this field or &#x60;external_id&#x60; or both are required. (optional, default to null)
			-- 
			-- argument: external_id The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or &#x60;file&#x60; or both are required. (optional, default to null)
			-- 
			-- argument: channels Comma-separated list of channel IDs where the file will be shared. (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/files.remote.share"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "token", token));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "file", file));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "external_id", external_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "channels", channels));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	files_remote_update (token: STRING_32; file: STRING_32; external_id: STRING_32; title: STRING_32; filetype: STRING_32; external_url: STRING_32; preview_image: STRING_32; indexable_file_contents: STRING_32): detachable STRING_TABLE [ANY]
			-- 
			-- Updates an existing remote file.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional, default to null)
			-- 
			-- argument: file Specify a file by providing its ID. (optional, default to null)
			-- 
			-- argument: external_id Creator defined GUID for the file. (optional, default to null)
			-- 
			-- argument: title Title of the file being shared. (optional, default to null)
			-- 
			-- argument: filetype type of file (optional, default to null)
			-- 
			-- argument: external_url URL of the remote file. (optional, default to null)
			-- 
			-- argument: preview_image Preview of the document via &#x60;multipart/form-data&#x60;. (optional, default to null)
			-- 
			-- argument: indexable_file_contents File containing contents that can be used to improve searchability for the remote file. (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/files.remote.update"

			if attached token as l_token then
				l_request.add_form(l_token,"token");
			end
			if attached file as l_file then
				l_request.add_form(l_file,"file");
			end
			if attached external_id as l_external_id then
				l_request.add_form(l_external_id,"external_id");
			end
			if attached title as l_title then
				l_request.add_form(l_title,"title");
			end
			if attached filetype as l_filetype then
				l_request.add_form(l_filetype,"filetype");
			end
			if attached external_url as l_external_url then
				l_request.add_form(l_external_url,"external_url");
			end
			if attached preview_image as l_preview_image then
				l_request.add_form(l_preview_image,"preview_image");
			end
			if attached indexable_file_contents as l_indexable_file_contents then
				l_request.add_form(l_indexable_file_contents,"indexable_file_contents");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/x-www-form-urlencoded">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	


end
