note
 description:"[
		Slack Web API
 		One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
  		The version of the OpenAPI document: 1.7.0
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	USERS_PROFILE_API

inherit

    API_I


feature -- API Access


	users_profile_get (token: STRING_32; include_labels: BOOLEAN; user: STRING_32): detachable STRING_TABLE [ANY]
			-- 
			-- Retrieves a user&#39;s profile information.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;users.profile:read&#x60; (required)
			-- 
			-- argument: include_labels Include labels for each ID in custom profile fields (optional, default to null)
			-- 
			-- argument: user User to retrieve profile info for (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/users.profile.get"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "token", token));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "include_labels", include_labels));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "user", user));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	users_profile_set (token: STRING_32; name: STRING_32; profile: STRING_32; user: STRING_32; value: STRING_32): detachable STRING_TABLE [ANY]
			-- 
			-- Set the profile information for a user.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;users.profile:write&#x60; (required)
			-- 
			-- argument: name Name of a single key to set. Usable only if &#x60;profile&#x60; is not passed. (optional, default to null)
			-- 
			-- argument: profile Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters. (optional, default to null)
			-- 
			-- argument: user ID of user to change. This argument may only be specified by team admins on paid teams. (optional, default to null)
			-- 
			-- argument: value Value to set a single key to. Usable only if &#x60;profile&#x60; is not passed. (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/users.profile.set"

			if attached token as l_token then
				l_request.add_header(l_token.out,"token");
			end
			if attached name as l_name then
				l_request.add_form(l_name,"name");
			end
			if attached profile as l_profile then
				l_request.add_form(l_profile,"profile");
			end
			if attached user as l_user then
				l_request.add_form(l_user,"user");
			end
			if attached value as l_value then
				l_request.add_form(l_value,"value");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/x-www-form-urlencoded", "application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	


end
