note
 description:"[
		Slack Web API
 		One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
  		The version of the OpenAPI document: 1.7.0
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	VIEWS_API

inherit

    API_I


feature -- API Access


	views_open (token: STRING_32; trigger_id: STRING_32; view: STRING_32): detachable STRING_TABLE [ANY]
			-- 
			-- Open a view for a user.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;none&#x60; (required)
			-- 
			-- argument: trigger_id Exchange a trigger to post to the user. (required)
			-- 
			-- argument: view A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. (required)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/views.open"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "trigger_id", trigger_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "view", view));

			if attached token as l_token then
				l_request.add_header(l_token.out,"token");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	views_publish (token: STRING_32; user_id: STRING_32; view: STRING_32; hash: STRING_32): detachable STRING_TABLE [ANY]
			-- 
			-- Publish a static view for a User.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;none&#x60; (required)
			-- 
			-- argument: user_id &#x60;id&#x60; of the user you want publish a view to. (required)
			-- 
			-- argument: view A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. (required)
			-- 
			-- argument: hash A string that represents view state to protect against possible race conditions. (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/views.publish"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "user_id", user_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "view", view));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "hash", hash));

			if attached token as l_token then
				l_request.add_header(l_token.out,"token");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	views_push (token: STRING_32; trigger_id: STRING_32; view: STRING_32): detachable STRING_TABLE [ANY]
			-- 
			-- Push a view onto the stack of a root view.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;none&#x60; (required)
			-- 
			-- argument: trigger_id Exchange a trigger to post to the user. (required)
			-- 
			-- argument: view A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. (required)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/views.push"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "trigger_id", trigger_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "view", view));

			if attached token as l_token then
				l_request.add_header(l_token.out,"token");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	views_update (token: STRING_32; view_id: STRING_32; external_id: STRING_32; view: STRING_32; hash: STRING_32): detachable STRING_TABLE [ANY]
			-- 
			-- Update an existing view.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;none&#x60; (required)
			-- 
			-- argument: view_id A unique identifier of the view to be updated. Either &#x60;view_id&#x60; or &#x60;external_id&#x60; is required. (optional, default to null)
			-- 
			-- argument: external_id A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either &#x60;view_id&#x60; or &#x60;external_id&#x60; is required. (optional, default to null)
			-- 
			-- argument: view A [view object](/reference/surfaces/views). This must be a JSON-encoded string. (optional, default to null)
			-- 
			-- argument: hash A string that represents view state to protect against possible race conditions. (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/views.update"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "view_id", view_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "external_id", external_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "view", view));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "hash", hash));

			if attached token as l_token then
				l_request.add_header(l_token.out,"token");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	


end
