note
 description:"[
		Slack Web API
 		One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
  		The version of the OpenAPI document: 1.7.0
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	REACTIONS_API

inherit

    API_I


feature -- API Access


	reactions_add (token: STRING_32; channel: STRING_32; name: STRING_32; timestamp: STRING_32): detachable STRING_TABLE [ANY]
			-- 
			-- Adds a reaction to an item.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;reactions:write&#x60; (required)
			-- 
			-- argument: channel Channel where the message to add reaction to was posted. (required)
			-- 
			-- argument: name Reaction (emoji) name. (required)
			-- 
			-- argument: timestamp Timestamp of the message to add reaction to. (required)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/reactions.add"

			if attached token as l_token then
				l_request.add_header(l_token.out,"token");
			end
			if attached channel as l_channel then
				l_request.add_form(l_channel,"channel");
			end
			if attached name as l_name then
				l_request.add_form(l_name,"name");
			end
			if attached timestamp as l_timestamp then
				l_request.add_form(l_timestamp,"timestamp");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/x-www-form-urlencoded", "application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	reactions_get (token: STRING_32; channel: STRING_32; file: STRING_32; file_comment: STRING_32; full: BOOLEAN; timestamp: STRING_32): detachable ANY
			-- 
			-- Gets reactions for an item.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;reactions:read&#x60; (required)
			-- 
			-- argument: channel Channel where the message to get reactions for was posted. (optional, default to null)
			-- 
			-- argument: file File to get reactions for. (optional, default to null)
			-- 
			-- argument: file_comment File comment to get reactions for. (optional, default to null)
			-- 
			-- argument: full If true always return the complete reaction list. (optional, default to null)
			-- 
			-- argument: timestamp Timestamp of the message to get reactions for. (optional, default to null)
			-- 
			-- 
			-- Result ANY
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/reactions.get"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "token", token));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "channel", channel));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "file", file));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "file_comment", file_comment));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "full", full));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timestamp", timestamp));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { ANY } l_response.data ({ ANY }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	reactions_list (token: STRING_32; user: STRING_32; full: BOOLEAN; count: INTEGER_32; page: INTEGER_32; cursor: STRING_32; limit: INTEGER_32): detachable STRING_TABLE [ANY]
			-- 
			-- Lists reactions made by a user.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;reactions:read&#x60; (required)
			-- 
			-- argument: user Show reactions made by this user. Defaults to the authed user. (optional, default to null)
			-- 
			-- argument: full If true always return the complete reaction list. (optional, default to null)
			-- 
			-- argument: count  (optional, default to null)
			-- 
			-- argument: page  (optional, default to null)
			-- 
			-- argument: cursor Parameter for pagination. Set &#x60;cursor&#x60; equal to the &#x60;next_cursor&#x60; attribute returned by the previous request&#39;s &#x60;response_metadata&#x60;. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more details. (optional, default to null)
			-- 
			-- argument: limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/reactions.list"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "token", token));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "user", user));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "full", full));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "count", count));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "page", page));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "cursor", cursor));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	reactions_remove (token: STRING_32; name: STRING_32; file: STRING_32; file_comment: STRING_32; channel: STRING_32; timestamp: STRING_32): detachable STRING_TABLE [ANY]
			-- 
			-- Removes a reaction from an item.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;reactions:write&#x60; (required)
			-- 
			-- argument: name Reaction (emoji) name. (required)
			-- 
			-- argument: file File to remove reaction from. (optional, default to null)
			-- 
			-- argument: file_comment File comment to remove reaction from. (optional, default to null)
			-- 
			-- argument: channel Channel where the message to remove reaction from was posted. (optional, default to null)
			-- 
			-- argument: timestamp Timestamp of the message to remove reaction from. (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/reactions.remove"

			if attached token as l_token then
				l_request.add_header(l_token.out,"token");
			end
			if attached name as l_name then
				l_request.add_form(l_name,"name");
			end
			if attached file as l_file then
				l_request.add_form(l_file,"file");
			end
			if attached file_comment as l_file_comment then
				l_request.add_form(l_file_comment,"file_comment");
			end
			if attached channel as l_channel then
				l_request.add_form(l_channel,"channel");
			end
			if attached timestamp as l_timestamp then
				l_request.add_form(l_timestamp,"timestamp");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/x-www-form-urlencoded", "application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	


end
