note
 description:"[
		Slack Web API
 		One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
  		The version of the OpenAPI document: 1.7.0
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	ADMIN_USERGROUPS_API

inherit

    API_I


feature -- API Access


	admin_usergroups_add_channels (token: STRING_32; usergroup_id: STRING_32; channel_ids: STRING_32; team_id: STRING_32): detachable STRING_TABLE [ANY]
			-- 
			-- Add one or more default channels to an IDP group.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
			-- 
			-- argument: usergroup_id ID of the IDP group to add default channels for. (required)
			-- 
			-- argument: channel_ids Comma separated string of channel IDs. (required)
			-- 
			-- argument: team_id The workspace to add default channels in. (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/admin.usergroups.addChannels"

			if attached token as l_token then
				l_request.add_header(l_token.out,"token");
			end
			if attached usergroup_id as l_usergroup_id then
				l_request.add_form(l_usergroup_id,"usergroup_id");
			end
			if attached team_id as l_team_id then
				l_request.add_form(l_team_id,"team_id");
			end
			if attached channel_ids as l_channel_ids then
				l_request.add_form(l_channel_ids,"channel_ids");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/x-www-form-urlencoded", "application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	admin_usergroups_add_teams (token: STRING_32; usergroup_id: STRING_32; team_ids: STRING_32; auto_provision: BOOLEAN): detachable STRING_TABLE [ANY]
			-- 
			-- Associate one or more default workspaces with an organization-wide IDP group.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
			-- 
			-- argument: usergroup_id An encoded usergroup (IDP Group) ID. (required)
			-- 
			-- argument: team_ids A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token. (required)
			-- 
			-- argument: auto_provision When &#x60;true&#x60;, this method automatically creates new workspace accounts for the IDP group members. (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/admin.usergroups.addTeams"

			if attached token as l_token then
				l_request.add_header(l_token.out,"token");
			end
			if attached usergroup_id as l_usergroup_id then
				l_request.add_form(l_usergroup_id,"usergroup_id");
			end
			if attached team_ids as l_team_ids then
				l_request.add_form(l_team_ids,"team_ids");
			end
			if attached auto_provision as l_auto_provision then
				l_request.add_form(l_auto_provision,"auto_provision");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/x-www-form-urlencoded", "application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	admin_usergroups_list_channels (token: STRING_32; usergroup_id: STRING_32; team_id: STRING_32; include_num_members: BOOLEAN): detachable STRING_TABLE [ANY]
			-- 
			-- List the channels linked to an org-level IDP group (user group).
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;admin.usergroups:read&#x60; (required)
			-- 
			-- argument: usergroup_id ID of the IDP group to list default channels for. (required)
			-- 
			-- argument: team_id ID of the the workspace. (optional, default to null)
			-- 
			-- argument: include_num_members Flag to include or exclude the count of members per channel. (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/admin.usergroups.listChannels"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "usergroup_id", usergroup_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "team_id", team_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "include_num_members", include_num_members));

			if attached token as l_token then
				l_request.add_header(l_token.out,"token");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	admin_usergroups_remove_channels (token: STRING_32; usergroup_id: STRING_32; channel_ids: STRING_32): detachable STRING_TABLE [ANY]
			-- 
			-- Remove one or more default channels from an org-level IDP group (user group).
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
			-- 
			-- argument: usergroup_id ID of the IDP Group (required)
			-- 
			-- argument: channel_ids Comma-separated string of channel IDs (required)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/admin.usergroups.removeChannels"

			if attached token as l_token then
				l_request.add_header(l_token.out,"token");
			end
			if attached usergroup_id as l_usergroup_id then
				l_request.add_form(l_usergroup_id,"usergroup_id");
			end
			if attached channel_ids as l_channel_ids then
				l_request.add_form(l_channel_ids,"channel_ids");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/x-www-form-urlencoded", "application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	


end
