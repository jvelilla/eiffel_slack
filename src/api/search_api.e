note
 description:"[
		Slack Web API
 		One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
  		The version of the OpenAPI document: 1.7.0
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	SEARCH_API

inherit

    API_I


feature -- API Access


	search_messages (token: STRING_32; query: STRING_32; count: INTEGER_32; highlight: BOOLEAN; page: INTEGER_32; sort: STRING_32; sort_dir: STRING_32): detachable STRING_TABLE [ANY]
			-- 
			-- Searches for messages matching a query.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;search:read&#x60; (required)
			-- 
			-- argument: query Search query. (required)
			-- 
			-- argument: count Pass the number of results you want per \&quot;page\&quot;. Maximum of &#x60;100&#x60;. (optional, default to null)
			-- 
			-- argument: highlight Pass a value of &#x60;true&#x60; to enable query highlight markers (see below). (optional, default to null)
			-- 
			-- argument: page  (optional, default to null)
			-- 
			-- argument: sort Return matches sorted by either &#x60;score&#x60; or &#x60;timestamp&#x60;. (optional, default to null)
			-- 
			-- argument: sort_dir Change sort direction to ascending (&#x60;asc&#x60;) or descending (&#x60;desc&#x60;). (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/search.messages"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "token", token));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "count", count));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "highlight", highlight));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "page", page));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "query", query));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "sort", sort));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "sort_dir", sort_dir));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	


end
