note
 description:"[
		Slack Web API
 		One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
  		The version of the OpenAPI document: 1.7.0
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	ADMIN_USERS_SESSION_API

inherit

    API_I


feature -- API Access


	admin_users_session_invalidate (token: STRING_32; team_id: STRING_32; session_id: INTEGER_32): detachable STRING_TABLE [ANY]
			-- 
			-- Invalidate a single session for a user by session_id
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
			-- 
			-- argument: team_id ID of the team that the session belongs to (required)
			-- 
			-- argument: session_id  (required)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/admin.users.session.invalidate"

			if attached token as l_token then
				l_request.add_header(l_token.out,"token");
			end
			if attached team_id as l_team_id then
				l_request.add_form(l_team_id,"team_id");
			end
			if attached session_id as l_session_id then
				l_request.add_form(l_session_id,"session_id");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/x-www-form-urlencoded", "application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	admin_users_session_reset (token: STRING_32; user_id: STRING_32; mobile_only: BOOLEAN; web_only: BOOLEAN): detachable STRING_TABLE [ANY]
			-- 
			-- Wipes all valid sessions on all devices for a given user
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
			-- 
			-- argument: user_id The ID of the user to wipe sessions for (required)
			-- 
			-- argument: mobile_only Only expire mobile sessions (default: false) (optional, default to null)
			-- 
			-- argument: web_only Only expire web sessions (default: false) (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/admin.users.session.reset"

			if attached token as l_token then
				l_request.add_header(l_token.out,"token");
			end
			if attached user_id as l_user_id then
				l_request.add_form(l_user_id,"user_id");
			end
			if attached mobile_only as l_mobile_only then
				l_request.add_form(l_mobile_only,"mobile_only");
			end
			if attached web_only as l_web_only then
				l_request.add_form(l_web_only,"web_only");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/x-www-form-urlencoded", "application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	


end
