note
 description:"[
		Slack Web API
 		One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
  		The version of the OpenAPI document: 1.7.0
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	CHAT_API

inherit

    API_I


feature -- API Access


	chat_delete (token: STRING_32; ts: REAL_32; channel: STRING_32; as_user: BOOLEAN): detachable STRING_TABLE [ANY]
			-- 
			-- Deletes a message.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional, default to null)
			-- 
			-- argument: ts Timestamp of the message to be deleted. (optional, default to null)
			-- 
			-- argument: channel Channel containing the message to be deleted. (optional, default to null)
			-- 
			-- argument: as_user Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope. (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/chat.delete"

			if attached token as l_token then
				l_request.add_header(l_token.out,"token");
			end
			if attached ts as l_ts then
				l_request.add_form(l_ts,"ts");
			end
			if attached channel as l_channel then
				l_request.add_form(l_channel,"channel");
			end
			if attached as_user as l_as_user then
				l_request.add_form(l_as_user,"as_user");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/x-www-form-urlencoded", "application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	chat_delete_scheduled_message (token: STRING_32; channel: STRING_32; scheduled_message_id: STRING_32; as_user: BOOLEAN): detachable STRING_TABLE [ANY]
			-- 
			-- Deletes a pending scheduled message from the queue.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
			-- 
			-- argument: channel The channel the scheduled_message is posting to (required)
			-- 
			-- argument: scheduled_message_id &#x60;scheduled_message_id&#x60; returned from call to chat.scheduleMessage (required)
			-- 
			-- argument: as_user Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope. (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/chat.deleteScheduledMessage"

			if attached token as l_token then
				l_request.add_header(l_token.out,"token");
			end
			if attached as_user as l_as_user then
				l_request.add_form(l_as_user,"as_user");
			end
			if attached channel as l_channel then
				l_request.add_form(l_channel,"channel");
			end
			if attached scheduled_message_id as l_scheduled_message_id then
				l_request.add_form(l_scheduled_message_id,"scheduled_message_id");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/x-www-form-urlencoded", "application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	chat_get_permalink (token: STRING_32; channel: STRING_32; message_ts: STRING_32): detachable STRING_TABLE [ANY]
			-- 
			-- Retrieve a permalink URL for a specific extant message
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;none&#x60; (required)
			-- 
			-- argument: channel The ID of the conversation or channel containing the message (required)
			-- 
			-- argument: message_ts A message&#39;s &#x60;ts&#x60; value, uniquely identifying it within a channel (required)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/chat.getPermalink"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "token", token));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "channel", channel));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "message_ts", message_ts));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	chat_me_message (token: STRING_32; channel: STRING_32; text: STRING_32): detachable STRING_TABLE [ANY]
			-- 
			-- Share a me message into a channel.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional, default to null)
			-- 
			-- argument: channel Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name. (optional, default to null)
			-- 
			-- argument: text Text of the message to send. (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/chat.meMessage"

			if attached token as l_token then
				l_request.add_header(l_token.out,"token");
			end
			if attached channel as l_channel then
				l_request.add_form(l_channel,"channel");
			end
			if attached text as l_text then
				l_request.add_form(l_text,"text");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/x-www-form-urlencoded", "application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	chat_post_ephemeral (token: STRING_32; channel: STRING_32; user: STRING_32; as_user: BOOLEAN; attachments: STRING_32; blocks: STRING_32; icon_emoji: STRING_32; icon_url: STRING_32; link_names: BOOLEAN; parse: STRING_32; text: STRING_32; thread_ts: STRING_32; username: STRING_32): detachable STRING_TABLE [ANY]
			-- 
			-- Sends an ephemeral message to a user in a channel.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
			-- 
			-- argument: channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. (required)
			-- 
			-- argument: user &#x60;id&#x60; of the user who will receive the ephemeral message. The user should be in the channel specified by the &#x60;channel&#x60; argument. (required)
			-- 
			-- argument: as_user Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false. (optional, default to null)
			-- 
			-- argument: attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional, default to null)
			-- 
			-- argument: blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional, default to null)
			-- 
			-- argument: icon_emoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below. (optional, default to null)
			-- 
			-- argument: icon_url URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional, default to null)
			-- 
			-- argument: link_names Find and link channel names and usernames. (optional, default to null)
			-- 
			-- argument: parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting). (optional, default to null)
			-- 
			-- argument: text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional, default to null)
			-- 
			-- argument: thread_ts Provide another message&#39;s &#x60;ts&#x60; value to post this message in a thread. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent&#39;s value instead. Ephemeral messages in threads are only shown if there is already an active thread. (optional, default to null)
			-- 
			-- argument: username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/chat.postEphemeral"

			if attached token as l_token then
				l_request.add_header(l_token.out,"token");
			end
			if attached as_user as l_as_user then
				l_request.add_form(l_as_user,"as_user");
			end
			if attached attachments as l_attachments then
				l_request.add_form(l_attachments,"attachments");
			end
			if attached blocks as l_blocks then
				l_request.add_form(l_blocks,"blocks");
			end
			if attached channel as l_channel then
				l_request.add_form(l_channel,"channel");
			end
			if attached icon_emoji as l_icon_emoji then
				l_request.add_form(l_icon_emoji,"icon_emoji");
			end
			if attached icon_url as l_icon_url then
				l_request.add_form(l_icon_url,"icon_url");
			end
			if attached link_names as l_link_names then
				l_request.add_form(l_link_names,"link_names");
			end
			if attached parse as l_parse then
				l_request.add_form(l_parse,"parse");
			end
			if attached text as l_text then
				l_request.add_form(l_text,"text");
			end
			if attached thread_ts as l_thread_ts then
				l_request.add_form(l_thread_ts,"thread_ts");
			end
			if attached user as l_user then
				l_request.add_form(l_user,"user");
			end
			if attached username as l_username then
				l_request.add_form(l_username,"username");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/x-www-form-urlencoded", "application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	chat_post_message (token: STRING_32; channel: STRING_32; as_user: STRING_32; attachments: STRING_32; blocks: STRING_32; icon_emoji: STRING_32; icon_url: STRING_32; link_names: BOOLEAN; mrkdwn: BOOLEAN; parse: STRING_32; reply_broadcast: BOOLEAN; text: STRING_32; thread_ts: STRING_32; unfurl_links: BOOLEAN; unfurl_media: BOOLEAN; username: STRING_32): detachable STRING_TABLE [ANY]
			-- 
			-- Sends a message to a channel.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
			-- 
			-- argument: channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details. (required)
			-- 
			-- argument: as_user Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below. (optional, default to null)
			-- 
			-- argument: attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional, default to null)
			-- 
			-- argument: blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional, default to null)
			-- 
			-- argument: icon_emoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below. (optional, default to null)
			-- 
			-- argument: icon_url URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional, default to null)
			-- 
			-- argument: link_names Find and link channel names and usernames. (optional, default to null)
			-- 
			-- argument: mrkdwn Disable Slack markup parsing by setting to &#x60;false&#x60;. Enabled by default. (optional, default to null)
			-- 
			-- argument: parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting). (optional, default to null)
			-- 
			-- argument: reply_broadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;. (optional, default to null)
			-- 
			-- argument: text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional, default to null)
			-- 
			-- argument: thread_ts Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional, default to null)
			-- 
			-- argument: unfurl_links Pass true to enable unfurling of primarily text-based content. (optional, default to null)
			-- 
			-- argument: unfurl_media Pass false to disable unfurling of media content. (optional, default to null)
			-- 
			-- argument: username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/chat.postMessage"

			if attached token as l_token then
				l_request.add_header(l_token.out,"token");
			end
			if attached as_user as l_as_user then
				l_request.add_form(l_as_user,"as_user");
			end
			if attached attachments as l_attachments then
				l_request.add_form(l_attachments,"attachments");
			end
			if attached blocks as l_blocks then
				l_request.add_form(l_blocks,"blocks");
			end
			if attached channel as l_channel then
				l_request.add_form(l_channel,"channel");
			end
			if attached icon_emoji as l_icon_emoji then
				l_request.add_form(l_icon_emoji,"icon_emoji");
			end
			if attached icon_url as l_icon_url then
				l_request.add_form(l_icon_url,"icon_url");
			end
			if attached link_names as l_link_names then
				l_request.add_form(l_link_names,"link_names");
			end
			if attached mrkdwn as l_mrkdwn then
				l_request.add_form(l_mrkdwn,"mrkdwn");
			end
			if attached parse as l_parse then
				l_request.add_form(l_parse,"parse");
			end
			if attached reply_broadcast as l_reply_broadcast then
				l_request.add_form(l_reply_broadcast,"reply_broadcast");
			end
			if attached text as l_text then
				l_request.add_form(l_text,"text");
			end
			if attached thread_ts as l_thread_ts then
				l_request.add_form(l_thread_ts,"thread_ts");
			end
			if attached unfurl_links as l_unfurl_links then
				l_request.add_form(l_unfurl_links,"unfurl_links");
			end
			if attached unfurl_media as l_unfurl_media then
				l_request.add_form(l_unfurl_media,"unfurl_media");
			end
			if attached username as l_username then
				l_request.add_form(l_username,"username");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/x-www-form-urlencoded", "application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	chat_schedule_message (token: STRING_32; channel: STRING_32; text: STRING_32; post_at: STRING_32; parse: STRING_32; as_user: BOOLEAN; link_names: BOOLEAN; attachments: STRING_32; blocks: STRING_32; unfurl_links: BOOLEAN; unfurl_media: BOOLEAN; thread_ts: REAL_32; reply_broadcast: BOOLEAN): detachable STRING_TABLE [ANY]
			-- 
			-- Schedules a message to be sent to a channel.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional, default to null)
			-- 
			-- argument: channel Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details. (optional, default to null)
			-- 
			-- argument: text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional, default to null)
			-- 
			-- argument: post_at Unix EPOCH timestamp of time in future to send the message. (optional, default to null)
			-- 
			-- argument: parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [chat.postMessage](chat.postMessage#formatting). (optional, default to null)
			-- 
			-- argument: as_user Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship). (optional, default to null)
			-- 
			-- argument: link_names Find and link channel names and usernames. (optional, default to null)
			-- 
			-- argument: attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional, default to null)
			-- 
			-- argument: blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional, default to null)
			-- 
			-- argument: unfurl_links Pass true to enable unfurling of primarily text-based content. (optional, default to null)
			-- 
			-- argument: unfurl_media Pass false to disable unfurling of media content. (optional, default to null)
			-- 
			-- argument: thread_ts Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional, default to null)
			-- 
			-- argument: reply_broadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;. (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/chat.scheduleMessage"

			if attached token as l_token then
				l_request.add_header(l_token.out,"token");
			end
			if attached channel as l_channel then
				l_request.add_form(l_channel,"channel");
			end
			if attached text as l_text then
				l_request.add_form(l_text,"text");
			end
			if attached post_at as l_post_at then
				l_request.add_form(l_post_at,"post_at");
			end
			if attached parse as l_parse then
				l_request.add_form(l_parse,"parse");
			end
			if attached as_user as l_as_user then
				l_request.add_form(l_as_user,"as_user");
			end
			if attached link_names as l_link_names then
				l_request.add_form(l_link_names,"link_names");
			end
			if attached attachments as l_attachments then
				l_request.add_form(l_attachments,"attachments");
			end
			if attached blocks as l_blocks then
				l_request.add_form(l_blocks,"blocks");
			end
			if attached unfurl_links as l_unfurl_links then
				l_request.add_form(l_unfurl_links,"unfurl_links");
			end
			if attached unfurl_media as l_unfurl_media then
				l_request.add_form(l_unfurl_media,"unfurl_media");
			end
			if attached thread_ts as l_thread_ts then
				l_request.add_form(l_thread_ts,"thread_ts");
			end
			if attached reply_broadcast as l_reply_broadcast then
				l_request.add_form(l_reply_broadcast,"reply_broadcast");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/x-www-form-urlencoded", "application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	chat_scheduled_messages_list (token: STRING_32; channel: STRING_32; latest: REAL_32; oldest: REAL_32; limit: INTEGER_32; cursor: STRING_32): detachable STRING_TABLE [ANY]
			-- 
			-- Returns a list of scheduled messages.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;none&#x60; (optional, default to null)
			-- 
			-- argument: channel The channel of the scheduled messages (optional, default to null)
			-- 
			-- argument: latest A UNIX timestamp of the latest value in the time range (optional, default to null)
			-- 
			-- argument: oldest A UNIX timestamp of the oldest value in the time range (optional, default to null)
			-- 
			-- argument: limit Maximum number of original entries to return. (optional, default to null)
			-- 
			-- argument: cursor For pagination purposes, this is the &#x60;cursor&#x60; value returned from a previous call to &#x60;chat.scheduledmessages.list&#x60; indicating where you want to start this call from. (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/chat.scheduledMessages.list"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "channel", channel));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "latest", latest));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "oldest", oldest));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "cursor", cursor));

			if attached token as l_token then
				l_request.add_header(l_token.out,"token");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	chat_unfurl (token: STRING_32; channel: STRING_32; ts: STRING_32; unfurls: STRING_32; user_auth_message: STRING_32; user_auth_required: BOOLEAN; user_auth_url: STRING_32): detachable STRING_TABLE [ANY]
			-- 
			-- Provide custom unfurl behavior for user-posted URLs
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;links:write&#x60; (required)
			-- 
			-- argument: channel Channel ID of the message (required)
			-- 
			-- argument: ts Timestamp of the message to add unfurl behavior to. (required)
			-- 
			-- argument: unfurls URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments. (optional, default to null)
			-- 
			-- argument: user_auth_message Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior (optional, default to null)
			-- 
			-- argument: user_auth_required Set to &#x60;true&#x60; or &#x60;1&#x60; to indicate the user must install your Slack app to trigger unfurls for this domain (optional, default to null)
			-- 
			-- argument: user_auth_url Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded. (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/chat.unfurl"

			if attached token as l_token then
				l_request.add_header(l_token.out,"token");
			end
			if attached channel as l_channel then
				l_request.add_form(l_channel,"channel");
			end
			if attached ts as l_ts then
				l_request.add_form(l_ts,"ts");
			end
			if attached unfurls as l_unfurls then
				l_request.add_form(l_unfurls,"unfurls");
			end
			if attached user_auth_message as l_user_auth_message then
				l_request.add_form(l_user_auth_message,"user_auth_message");
			end
			if attached user_auth_required as l_user_auth_required then
				l_request.add_form(l_user_auth_required,"user_auth_required");
			end
			if attached user_auth_url as l_user_auth_url then
				l_request.add_form(l_user_auth_url,"user_auth_url");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/x-www-form-urlencoded", "application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	chat_update (token: STRING_32; channel: STRING_32; ts: STRING_32; as_user: STRING_32; attachments: STRING_32; blocks: STRING_32; link_names: STRING_32; parse: STRING_32; text: STRING_32): detachable STRING_TABLE [ANY]
			-- 
			-- Updates a message.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
			-- 
			-- argument: channel Channel containing the message to be updated. (required)
			-- 
			-- argument: ts Timestamp of the message to be updated. (required)
			-- 
			-- argument: as_user Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users. (optional, default to null)
			-- 
			-- argument: attachments A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting &#x60;text&#x60;. If you don&#39;t include this field, the message&#39;s previous &#x60;attachments&#x60; will be retained. To remove previous &#x60;attachments&#x60;, include an empty array for this field. (optional, default to null)
			-- 
			-- argument: blocks A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don&#39;t include this field, the message&#39;s previous &#x60;blocks&#x60; will be retained. To remove previous &#x60;blocks&#x60;, include an empty array for this field. (optional, default to null)
			-- 
			-- argument: link_names Find and link channel names and usernames. Defaults to &#x60;none&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;none&#x60;. (optional, default to null)
			-- 
			-- argument: parse Change how messages are treated. Defaults to &#x60;client&#x60;, unlike &#x60;chat.postMessage&#x60;. Accepts either &#x60;none&#x60; or &#x60;full&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;client&#x60;. (optional, default to null)
			-- 
			-- argument: text New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It&#39;s not required when presenting &#x60;blocks&#x60; or &#x60;attachments&#x60;. (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/chat.update"

			if attached token as l_token then
				l_request.add_header(l_token.out,"token");
			end
			if attached as_user as l_as_user then
				l_request.add_form(l_as_user,"as_user");
			end
			if attached attachments as l_attachments then
				l_request.add_form(l_attachments,"attachments");
			end
			if attached blocks as l_blocks then
				l_request.add_form(l_blocks,"blocks");
			end
			if attached channel as l_channel then
				l_request.add_form(l_channel,"channel");
			end
			if attached link_names as l_link_names then
				l_request.add_form(l_link_names,"link_names");
			end
			if attached parse as l_parse then
				l_request.add_form(l_parse,"parse");
			end
			if attached text as l_text then
				l_request.add_form(l_text,"text");
			end
			if attached ts as l_ts then
				l_request.add_form(l_ts,"ts");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/x-www-form-urlencoded", "application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	


end
