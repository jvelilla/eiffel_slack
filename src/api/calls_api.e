note
 description:"[
		Slack Web API
 		One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
  		The version of the OpenAPI document: 1.7.0
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	CALLS_API

inherit

    API_I


feature -- API Access


	calls_add (token: STRING_32; external_unique_id: STRING_32; join_url: STRING_32; external_display_id: STRING_32; desktop_app_join_url: STRING_32; date_start: INTEGER_32; title: STRING_32; created_by: STRING_32; users: STRING_32): detachable STRING_TABLE [ANY]
			-- 
			-- Registers a new Call.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
			-- 
			-- argument: external_unique_id An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service. (required)
			-- 
			-- argument: join_url The URL required for a client to join the Call. (required)
			-- 
			-- argument: external_display_id An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object. (optional, default to null)
			-- 
			-- argument: desktop_app_join_url When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL. (optional, default to null)
			-- 
			-- argument: date_start Call start time in UTC UNIX timestamp format (optional, default to null)
			-- 
			-- argument: title The name of the Call. (optional, default to null)
			-- 
			-- argument: created_by The valid Slack user ID of the user who created this Call. When this method is called with a user token, the &#x60;created_by&#x60; field is optional and defaults to the authed user of the token. Otherwise, the field is required. (optional, default to null)
			-- 
			-- argument: users The list of users to register as participants in the Call. [Read more on how to specify users here](/apis/calls#users). (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/calls.add"

			if attached token as l_token then
				l_request.add_header(l_token.out,"token");
			end
			if attached external_unique_id as l_external_unique_id then
				l_request.add_form(l_external_unique_id,"external_unique_id");
			end
			if attached external_display_id as l_external_display_id then
				l_request.add_form(l_external_display_id,"external_display_id");
			end
			if attached join_url as l_join_url then
				l_request.add_form(l_join_url,"join_url");
			end
			if attached desktop_app_join_url as l_desktop_app_join_url then
				l_request.add_form(l_desktop_app_join_url,"desktop_app_join_url");
			end
			if attached date_start as l_date_start then
				l_request.add_form(l_date_start,"date_start");
			end
			if attached title as l_title then
				l_request.add_form(l_title,"title");
			end
			if attached created_by as l_created_by then
				l_request.add_form(l_created_by,"created_by");
			end
			if attached users as l_users then
				l_request.add_form(l_users,"users");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/x-www-form-urlencoded", "application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	calls_end (token: STRING_32; id: STRING_32; duration: INTEGER_32): detachable STRING_TABLE [ANY]
			-- 
			-- Ends a Call.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
			-- 
			-- argument: id &#x60;id&#x60; returned when registering the call using the [&#x60;calls.add&#x60;](/methods/calls.add) method. (required)
			-- 
			-- argument: duration Call duration in seconds (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/calls.end"

			if attached token as l_token then
				l_request.add_header(l_token.out,"token");
			end
			if attached id as l_id then
				l_request.add_form(l_id,"id");
			end
			if attached duration as l_duration then
				l_request.add_form(l_duration,"duration");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/x-www-form-urlencoded", "application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	calls_info (token: STRING_32; id: STRING_32): detachable STRING_TABLE [ANY]
			-- 
			-- Returns information about a Call.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;calls:read&#x60; (required)
			-- 
			-- argument: id &#x60;id&#x60; of the Call returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method. (required)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/calls.info"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "id", id));

			if attached token as l_token then
				l_request.add_header(l_token.out,"token");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	calls_participants_add (token: STRING_32; id: STRING_32; users: STRING_32): detachable STRING_TABLE [ANY]
			-- 
			-- Registers new participants added to a Call.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
			-- 
			-- argument: id &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method. (required)
			-- 
			-- argument: users The list of users to add as participants in the Call. [Read more on how to specify users here](/apis/calls#users). (required)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/calls.participants.add"

			if attached token as l_token then
				l_request.add_header(l_token.out,"token");
			end
			if attached id as l_id then
				l_request.add_form(l_id,"id");
			end
			if attached users as l_users then
				l_request.add_form(l_users,"users");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/x-www-form-urlencoded", "application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	calls_participants_remove (token: STRING_32; id: STRING_32; users: STRING_32): detachable STRING_TABLE [ANY]
			-- 
			-- Registers participants removed from a Call.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
			-- 
			-- argument: id &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method. (required)
			-- 
			-- argument: users The list of users to remove as participants in the Call. [Read more on how to specify users here](/apis/calls#users). (required)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/calls.participants.remove"

			if attached token as l_token then
				l_request.add_header(l_token.out,"token");
			end
			if attached id as l_id then
				l_request.add_form(l_id,"id");
			end
			if attached users as l_users then
				l_request.add_form(l_users,"users");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/x-www-form-urlencoded", "application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	calls_update (token: STRING_32; id: STRING_32; title: STRING_32; join_url: STRING_32; desktop_app_join_url: STRING_32): detachable STRING_TABLE [ANY]
			-- 
			-- Updates information about a Call.
			-- 
			-- argument: token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
			-- 
			-- argument: id &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method. (required)
			-- 
			-- argument: title The name of the Call. (optional, default to null)
			-- 
			-- argument: join_url The URL required for a client to join the Call. (optional, default to null)
			-- 
			-- argument: desktop_app_join_url When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL. (optional, default to null)
			-- 
			-- 
			-- Result STRING_TABLE [ANY]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/calls.update"

			if attached token as l_token then
				l_request.add_header(l_token.out,"token");
			end
			if attached id as l_id then
				l_request.add_form(l_id,"id");
			end
			if attached title as l_title then
				l_request.add_form(l_title,"title");
			end
			if attached join_url as l_join_url then
				l_request.add_form(l_join_url,"join_url");
			end
			if attached desktop_app_join_url as l_desktop_app_join_url then
				l_request.add_form(l_desktop_app_join_url,"desktop_app_join_url");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/x-www-form-urlencoded", "application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"slackAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_TABLE [ANY] } l_response.data ({ STRING_TABLE [ANY] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	


end
