note
 description:"[
		Slack Web API
 		One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
  		The version of the OpenAPI document: 1.7.0
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class OBJS_MESSAGE 




feature --Access

    attachments: detachable LIST [OBJS_MESSAGE_ATTACHMENTS] 
      
    blocks: detachable LIST [ANY] 
      -- This is a very loose definition, in the future, we'll populate this with deeper schema in this definition namespace.
    bot_id: detachable ANY 
      
    bot_profile: detachable OBJS_BOT_PROFILE 
      
    client_msg_id: detachable STRING_32 
      
    comment: detachable OBJS_COMMENT 
      
 	display_as_bot: BOOLEAN 
    	 
    file: detachable OBJS_FILE 
      
    files: detachable LIST [OBJS_FILE] 
      
    icons: detachable OBJS_MESSAGE_ICONS 
      
    inviter: detachable STRING_32 
      
 	is_delayed_message: BOOLEAN 
    	 
 	is_intro: BOOLEAN 
    	 
 	is_starred: BOOLEAN 
    	 
    last_read: detachable STRING_32 
      
    latest_reply: detachable STRING_32 
      
    name: detachable STRING_32 
      
    old_name: detachable STRING_32 
      
    parent_user_id: detachable STRING_32 
      
    permalink: detachable STRING 
      
    pinned_to: detachable LIST [STRING_32] 
      
    purpose: detachable STRING_32 
      
    reactions: detachable LIST [OBJS_REACTION] 
      
 	reply_count: INTEGER_32 
    	 
    reply_users: detachable LIST [STRING_32] 
      
 	reply_users_count: INTEGER_32 
    	 
    source_team: detachable STRING_32 
      
 	subscribed: BOOLEAN 
    	 
    subtype: detachable STRING_32 
      
    team: detachable STRING_32 
      
    text: detachable STRING_32 
      
    thread_ts: detachable STRING_32 
      
    topic: detachable STRING_32 
      
    ts: detachable STRING_32 
      
    type: detachable STRING_32 
      
 	unread_count: INTEGER_32 
    	 
 	upload: BOOLEAN 
    	 
    user: detachable STRING_32 
      
    user_profile: detachable OBJS_USER_PROFILE_SHORT 
      
    user_team: detachable STRING_32 
      
    username: detachable STRING_32 
      

feature -- Change Element  
 
    set_attachments (a_name: like attachments)
        -- Set 'attachments' with 'a_name'.
      do
        attachments := a_name
      ensure
        attachments_set: attachments = a_name		
      end

    set_blocks (a_name: like blocks)
        -- Set 'blocks' with 'a_name'.
      do
        blocks := a_name
      ensure
        blocks_set: blocks = a_name		
      end

    set_bot_id (a_name: like bot_id)
        -- Set 'bot_id' with 'a_name'.
      do
        bot_id := a_name
      ensure
        bot_id_set: bot_id = a_name		
      end

    set_bot_profile (a_name: like bot_profile)
        -- Set 'bot_profile' with 'a_name'.
      do
        bot_profile := a_name
      ensure
        bot_profile_set: bot_profile = a_name		
      end

    set_client_msg_id (a_name: like client_msg_id)
        -- Set 'client_msg_id' with 'a_name'.
      do
        client_msg_id := a_name
      ensure
        client_msg_id_set: client_msg_id = a_name		
      end

    set_comment (a_name: like comment)
        -- Set 'comment' with 'a_name'.
      do
        comment := a_name
      ensure
        comment_set: comment = a_name		
      end

    set_display_as_bot (a_name: like display_as_bot)
        -- Set 'display_as_bot' with 'a_name'.
      do
        display_as_bot := a_name
      ensure
        display_as_bot_set: display_as_bot = a_name		
      end

    set_file (a_name: like file)
        -- Set 'file' with 'a_name'.
      do
        file := a_name
      ensure
        file_set: file = a_name		
      end

    set_files (a_name: like files)
        -- Set 'files' with 'a_name'.
      do
        files := a_name
      ensure
        files_set: files = a_name		
      end

    set_icons (a_name: like icons)
        -- Set 'icons' with 'a_name'.
      do
        icons := a_name
      ensure
        icons_set: icons = a_name		
      end

    set_inviter (a_name: like inviter)
        -- Set 'inviter' with 'a_name'.
      do
        inviter := a_name
      ensure
        inviter_set: inviter = a_name		
      end

    set_is_delayed_message (a_name: like is_delayed_message)
        -- Set 'is_delayed_message' with 'a_name'.
      do
        is_delayed_message := a_name
      ensure
        is_delayed_message_set: is_delayed_message = a_name		
      end

    set_is_intro (a_name: like is_intro)
        -- Set 'is_intro' with 'a_name'.
      do
        is_intro := a_name
      ensure
        is_intro_set: is_intro = a_name		
      end

    set_is_starred (a_name: like is_starred)
        -- Set 'is_starred' with 'a_name'.
      do
        is_starred := a_name
      ensure
        is_starred_set: is_starred = a_name		
      end

    set_last_read (a_name: like last_read)
        -- Set 'last_read' with 'a_name'.
      do
        last_read := a_name
      ensure
        last_read_set: last_read = a_name		
      end

    set_latest_reply (a_name: like latest_reply)
        -- Set 'latest_reply' with 'a_name'.
      do
        latest_reply := a_name
      ensure
        latest_reply_set: latest_reply = a_name		
      end

    set_name (a_name: like name)
        -- Set 'name' with 'a_name'.
      do
        name := a_name
      ensure
        name_set: name = a_name		
      end

    set_old_name (a_name: like old_name)
        -- Set 'old_name' with 'a_name'.
      do
        old_name := a_name
      ensure
        old_name_set: old_name = a_name		
      end

    set_parent_user_id (a_name: like parent_user_id)
        -- Set 'parent_user_id' with 'a_name'.
      do
        parent_user_id := a_name
      ensure
        parent_user_id_set: parent_user_id = a_name		
      end

    set_permalink (a_name: like permalink)
        -- Set 'permalink' with 'a_name'.
      do
        permalink := a_name
      ensure
        permalink_set: permalink = a_name		
      end

    set_pinned_to (a_name: like pinned_to)
        -- Set 'pinned_to' with 'a_name'.
      do
        pinned_to := a_name
      ensure
        pinned_to_set: pinned_to = a_name		
      end

    set_purpose (a_name: like purpose)
        -- Set 'purpose' with 'a_name'.
      do
        purpose := a_name
      ensure
        purpose_set: purpose = a_name		
      end

    set_reactions (a_name: like reactions)
        -- Set 'reactions' with 'a_name'.
      do
        reactions := a_name
      ensure
        reactions_set: reactions = a_name		
      end

    set_reply_count (a_name: like reply_count)
        -- Set 'reply_count' with 'a_name'.
      do
        reply_count := a_name
      ensure
        reply_count_set: reply_count = a_name		
      end

    set_reply_users (a_name: like reply_users)
        -- Set 'reply_users' with 'a_name'.
      do
        reply_users := a_name
      ensure
        reply_users_set: reply_users = a_name		
      end

    set_reply_users_count (a_name: like reply_users_count)
        -- Set 'reply_users_count' with 'a_name'.
      do
        reply_users_count := a_name
      ensure
        reply_users_count_set: reply_users_count = a_name		
      end

    set_source_team (a_name: like source_team)
        -- Set 'source_team' with 'a_name'.
      do
        source_team := a_name
      ensure
        source_team_set: source_team = a_name		
      end

    set_subscribed (a_name: like subscribed)
        -- Set 'subscribed' with 'a_name'.
      do
        subscribed := a_name
      ensure
        subscribed_set: subscribed = a_name		
      end

    set_subtype (a_name: like subtype)
        -- Set 'subtype' with 'a_name'.
      do
        subtype := a_name
      ensure
        subtype_set: subtype = a_name		
      end

    set_team (a_name: like team)
        -- Set 'team' with 'a_name'.
      do
        team := a_name
      ensure
        team_set: team = a_name		
      end

    set_text (a_name: like text)
        -- Set 'text' with 'a_name'.
      do
        text := a_name
      ensure
        text_set: text = a_name		
      end

    set_thread_ts (a_name: like thread_ts)
        -- Set 'thread_ts' with 'a_name'.
      do
        thread_ts := a_name
      ensure
        thread_ts_set: thread_ts = a_name		
      end

    set_topic (a_name: like topic)
        -- Set 'topic' with 'a_name'.
      do
        topic := a_name
      ensure
        topic_set: topic = a_name		
      end

    set_ts (a_name: like ts)
        -- Set 'ts' with 'a_name'.
      do
        ts := a_name
      ensure
        ts_set: ts = a_name		
      end

    set_type (a_name: like type)
        -- Set 'type' with 'a_name'.
      do
        type := a_name
      ensure
        type_set: type = a_name		
      end

    set_unread_count (a_name: like unread_count)
        -- Set 'unread_count' with 'a_name'.
      do
        unread_count := a_name
      ensure
        unread_count_set: unread_count = a_name		
      end

    set_upload (a_name: like upload)
        -- Set 'upload' with 'a_name'.
      do
        upload := a_name
      ensure
        upload_set: upload = a_name		
      end

    set_user (a_name: like user)
        -- Set 'user' with 'a_name'.
      do
        user := a_name
      ensure
        user_set: user = a_name		
      end

    set_user_profile (a_name: like user_profile)
        -- Set 'user_profile' with 'a_name'.
      do
        user_profile := a_name
      ensure
        user_profile_set: user_profile = a_name		
      end

    set_user_team (a_name: like user_team)
        -- Set 'user_team' with 'a_name'.
      do
        user_team := a_name
      ensure
        user_team_set: user_team = a_name		
      end

    set_username (a_name: like username)
        -- Set 'username' with 'a_name'.
      do
        username := a_name
      ensure
        username_set: username = a_name		
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass OBJS_MESSAGE%N")
        if attached attachments as l_attachments then
          across l_attachments as ic loop
            Result.append ("%N attachments:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached blocks as l_blocks then
          across l_blocks as ic loop
            Result.append ("%N blocks:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached bot_id as l_bot_id then
          Result.append ("%Nbot_id:")
          Result.append (l_bot_id.out)
          Result.append ("%N")    
        end  
        if attached bot_profile as l_bot_profile then
          Result.append ("%Nbot_profile:")
          Result.append (l_bot_profile.out)
          Result.append ("%N")    
        end  
        if attached client_msg_id as l_client_msg_id then
          Result.append ("%Nclient_msg_id:")
          Result.append (l_client_msg_id.out)
          Result.append ("%N")    
        end  
        if attached comment as l_comment then
          Result.append ("%Ncomment:")
          Result.append (l_comment.out)
          Result.append ("%N")    
        end  
        if attached display_as_bot as l_display_as_bot then
          Result.append ("%Ndisplay_as_bot:")
          Result.append (l_display_as_bot.out)
          Result.append ("%N")    
        end  
        if attached file as l_file then
          Result.append ("%Nfile:")
          Result.append (l_file.out)
          Result.append ("%N")    
        end  
        if attached files as l_files then
          across l_files as ic loop
            Result.append ("%N files:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached icons as l_icons then
          Result.append ("%Nicons:")
          Result.append (l_icons.out)
          Result.append ("%N")    
        end  
        if attached inviter as l_inviter then
          Result.append ("%Ninviter:")
          Result.append (l_inviter.out)
          Result.append ("%N")    
        end  
        if attached is_delayed_message as l_is_delayed_message then
          Result.append ("%Nis_delayed_message:")
          Result.append (l_is_delayed_message.out)
          Result.append ("%N")    
        end  
        if attached is_intro as l_is_intro then
          Result.append ("%Nis_intro:")
          Result.append (l_is_intro.out)
          Result.append ("%N")    
        end  
        if attached is_starred as l_is_starred then
          Result.append ("%Nis_starred:")
          Result.append (l_is_starred.out)
          Result.append ("%N")    
        end  
        if attached last_read as l_last_read then
          Result.append ("%Nlast_read:")
          Result.append (l_last_read.out)
          Result.append ("%N")    
        end  
        if attached latest_reply as l_latest_reply then
          Result.append ("%Nlatest_reply:")
          Result.append (l_latest_reply.out)
          Result.append ("%N")    
        end  
        if attached name as l_name then
          Result.append ("%Nname:")
          Result.append (l_name.out)
          Result.append ("%N")    
        end  
        if attached old_name as l_old_name then
          Result.append ("%Nold_name:")
          Result.append (l_old_name.out)
          Result.append ("%N")    
        end  
        if attached parent_user_id as l_parent_user_id then
          Result.append ("%Nparent_user_id:")
          Result.append (l_parent_user_id.out)
          Result.append ("%N")    
        end  
        if attached permalink as l_permalink then
          Result.append ("%Npermalink:")
          Result.append (l_permalink.out)
          Result.append ("%N")    
        end  
        if attached pinned_to as l_pinned_to then
          across l_pinned_to as ic loop
            Result.append ("%N pinned_to:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached purpose as l_purpose then
          Result.append ("%Npurpose:")
          Result.append (l_purpose.out)
          Result.append ("%N")    
        end  
        if attached reactions as l_reactions then
          across l_reactions as ic loop
            Result.append ("%N reactions:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached reply_count as l_reply_count then
          Result.append ("%Nreply_count:")
          Result.append (l_reply_count.out)
          Result.append ("%N")    
        end  
        if attached reply_users as l_reply_users then
          across l_reply_users as ic loop
            Result.append ("%N reply_users:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached reply_users_count as l_reply_users_count then
          Result.append ("%Nreply_users_count:")
          Result.append (l_reply_users_count.out)
          Result.append ("%N")    
        end  
        if attached source_team as l_source_team then
          Result.append ("%Nsource_team:")
          Result.append (l_source_team.out)
          Result.append ("%N")    
        end  
        if attached subscribed as l_subscribed then
          Result.append ("%Nsubscribed:")
          Result.append (l_subscribed.out)
          Result.append ("%N")    
        end  
        if attached subtype as l_subtype then
          Result.append ("%Nsubtype:")
          Result.append (l_subtype.out)
          Result.append ("%N")    
        end  
        if attached team as l_team then
          Result.append ("%Nteam:")
          Result.append (l_team.out)
          Result.append ("%N")    
        end  
        if attached text as l_text then
          Result.append ("%Ntext:")
          Result.append (l_text.out)
          Result.append ("%N")    
        end  
        if attached thread_ts as l_thread_ts then
          Result.append ("%Nthread_ts:")
          Result.append (l_thread_ts.out)
          Result.append ("%N")    
        end  
        if attached topic as l_topic then
          Result.append ("%Ntopic:")
          Result.append (l_topic.out)
          Result.append ("%N")    
        end  
        if attached ts as l_ts then
          Result.append ("%Nts:")
          Result.append (l_ts.out)
          Result.append ("%N")    
        end  
        if attached type as l_type then
          Result.append ("%Ntype:")
          Result.append (l_type.out)
          Result.append ("%N")    
        end  
        if attached unread_count as l_unread_count then
          Result.append ("%Nunread_count:")
          Result.append (l_unread_count.out)
          Result.append ("%N")    
        end  
        if attached upload as l_upload then
          Result.append ("%Nupload:")
          Result.append (l_upload.out)
          Result.append ("%N")    
        end  
        if attached user as l_user then
          Result.append ("%Nuser:")
          Result.append (l_user.out)
          Result.append ("%N")    
        end  
        if attached user_profile as l_user_profile then
          Result.append ("%Nuser_profile:")
          Result.append (l_user_profile.out)
          Result.append ("%N")    
        end  
        if attached user_team as l_user_team then
          Result.append ("%Nuser_team:")
          Result.append (l_user_team.out)
          Result.append ("%N")    
        end  
        if attached username as l_username then
          Result.append ("%Nusername:")
          Result.append (l_username.out)
          Result.append ("%N")    
        end  
      end
end


