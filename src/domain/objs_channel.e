note
 description:"[
		Slack Web API
 		One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
  		The version of the OpenAPI document: 1.7.0
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class OBJS_CHANNEL 




feature --Access

    accepted_user: detachable STRING_32 
      
 	created: INTEGER_32 
    	 
    creator: detachable STRING_32 
      
    id: detachable STRING_32 
      
 	is_archived: BOOLEAN 
    	 
 	is_channel: BOOLEAN 
    	 
 	is_frozen: BOOLEAN 
    	 
 	is_general: BOOLEAN 
    	 
 	is_member: BOOLEAN 
    	 
 	is_moved: INTEGER_32 
    	 
 	is_mpim: BOOLEAN 
    	 
 	is_non_threadable: BOOLEAN 
    	 
 	is_org_shared: BOOLEAN 
    	 
 	is_pending_ext_shared: BOOLEAN 
    	 
 	is_private: BOOLEAN 
    	 
 	is_read_only: BOOLEAN 
    	 
 	is_shared: BOOLEAN 
    	 
 	is_thread_only: BOOLEAN 
    	 
    last_read: detachable STRING_32 
      
    latest: detachable ANY 
      
    members: detachable LIST [STRING_32] 
      
    name: detachable STRING_32 
      
    name_normalized: detachable STRING_32 
      
 	num_members: INTEGER_32 
    	 
    pending_shared: detachable LIST [STRING_32] 
      
    previous_names: detachable LIST [STRING_32] 
      
 	priority: REAL_32 
    	 
    purpose: detachable OBJS_CHANNEL_PURPOSE 
      
    topic: detachable OBJS_CHANNEL_PURPOSE 
      
 	unlinked: INTEGER_32 
    	 
 	unread_count: INTEGER_32 
    	 
 	unread_count_display: INTEGER_32 
    	 

feature -- Change Element  
 
    set_accepted_user (a_name: like accepted_user)
        -- Set 'accepted_user' with 'a_name'.
      do
        accepted_user := a_name
      ensure
        accepted_user_set: accepted_user = a_name		
      end

    set_created (a_name: like created)
        -- Set 'created' with 'a_name'.
      do
        created := a_name
      ensure
        created_set: created = a_name		
      end

    set_creator (a_name: like creator)
        -- Set 'creator' with 'a_name'.
      do
        creator := a_name
      ensure
        creator_set: creator = a_name		
      end

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name		
      end

    set_is_archived (a_name: like is_archived)
        -- Set 'is_archived' with 'a_name'.
      do
        is_archived := a_name
      ensure
        is_archived_set: is_archived = a_name		
      end

    set_is_channel (a_name: like is_channel)
        -- Set 'is_channel' with 'a_name'.
      do
        is_channel := a_name
      ensure
        is_channel_set: is_channel = a_name		
      end

    set_is_frozen (a_name: like is_frozen)
        -- Set 'is_frozen' with 'a_name'.
      do
        is_frozen := a_name
      ensure
        is_frozen_set: is_frozen = a_name		
      end

    set_is_general (a_name: like is_general)
        -- Set 'is_general' with 'a_name'.
      do
        is_general := a_name
      ensure
        is_general_set: is_general = a_name		
      end

    set_is_member (a_name: like is_member)
        -- Set 'is_member' with 'a_name'.
      do
        is_member := a_name
      ensure
        is_member_set: is_member = a_name		
      end

    set_is_moved (a_name: like is_moved)
        -- Set 'is_moved' with 'a_name'.
      do
        is_moved := a_name
      ensure
        is_moved_set: is_moved = a_name		
      end

    set_is_mpim (a_name: like is_mpim)
        -- Set 'is_mpim' with 'a_name'.
      do
        is_mpim := a_name
      ensure
        is_mpim_set: is_mpim = a_name		
      end

    set_is_non_threadable (a_name: like is_non_threadable)
        -- Set 'is_non_threadable' with 'a_name'.
      do
        is_non_threadable := a_name
      ensure
        is_non_threadable_set: is_non_threadable = a_name		
      end

    set_is_org_shared (a_name: like is_org_shared)
        -- Set 'is_org_shared' with 'a_name'.
      do
        is_org_shared := a_name
      ensure
        is_org_shared_set: is_org_shared = a_name		
      end

    set_is_pending_ext_shared (a_name: like is_pending_ext_shared)
        -- Set 'is_pending_ext_shared' with 'a_name'.
      do
        is_pending_ext_shared := a_name
      ensure
        is_pending_ext_shared_set: is_pending_ext_shared = a_name		
      end

    set_is_private (a_name: like is_private)
        -- Set 'is_private' with 'a_name'.
      do
        is_private := a_name
      ensure
        is_private_set: is_private = a_name		
      end

    set_is_read_only (a_name: like is_read_only)
        -- Set 'is_read_only' with 'a_name'.
      do
        is_read_only := a_name
      ensure
        is_read_only_set: is_read_only = a_name		
      end

    set_is_shared (a_name: like is_shared)
        -- Set 'is_shared' with 'a_name'.
      do
        is_shared := a_name
      ensure
        is_shared_set: is_shared = a_name		
      end

    set_is_thread_only (a_name: like is_thread_only)
        -- Set 'is_thread_only' with 'a_name'.
      do
        is_thread_only := a_name
      ensure
        is_thread_only_set: is_thread_only = a_name		
      end

    set_last_read (a_name: like last_read)
        -- Set 'last_read' with 'a_name'.
      do
        last_read := a_name
      ensure
        last_read_set: last_read = a_name		
      end

    set_latest (a_name: like latest)
        -- Set 'latest' with 'a_name'.
      do
        latest := a_name
      ensure
        latest_set: latest = a_name		
      end

    set_members (a_name: like members)
        -- Set 'members' with 'a_name'.
      do
        members := a_name
      ensure
        members_set: members = a_name		
      end

    set_name (a_name: like name)
        -- Set 'name' with 'a_name'.
      do
        name := a_name
      ensure
        name_set: name = a_name		
      end

    set_name_normalized (a_name: like name_normalized)
        -- Set 'name_normalized' with 'a_name'.
      do
        name_normalized := a_name
      ensure
        name_normalized_set: name_normalized = a_name		
      end

    set_num_members (a_name: like num_members)
        -- Set 'num_members' with 'a_name'.
      do
        num_members := a_name
      ensure
        num_members_set: num_members = a_name		
      end

    set_pending_shared (a_name: like pending_shared)
        -- Set 'pending_shared' with 'a_name'.
      do
        pending_shared := a_name
      ensure
        pending_shared_set: pending_shared = a_name		
      end

    set_previous_names (a_name: like previous_names)
        -- Set 'previous_names' with 'a_name'.
      do
        previous_names := a_name
      ensure
        previous_names_set: previous_names = a_name		
      end

    set_priority (a_name: like priority)
        -- Set 'priority' with 'a_name'.
      do
        priority := a_name
      ensure
        priority_set: priority = a_name		
      end

    set_purpose (a_name: like purpose)
        -- Set 'purpose' with 'a_name'.
      do
        purpose := a_name
      ensure
        purpose_set: purpose = a_name		
      end

    set_topic (a_name: like topic)
        -- Set 'topic' with 'a_name'.
      do
        topic := a_name
      ensure
        topic_set: topic = a_name		
      end

    set_unlinked (a_name: like unlinked)
        -- Set 'unlinked' with 'a_name'.
      do
        unlinked := a_name
      ensure
        unlinked_set: unlinked = a_name		
      end

    set_unread_count (a_name: like unread_count)
        -- Set 'unread_count' with 'a_name'.
      do
        unread_count := a_name
      ensure
        unread_count_set: unread_count = a_name		
      end

    set_unread_count_display (a_name: like unread_count_display)
        -- Set 'unread_count_display' with 'a_name'.
      do
        unread_count_display := a_name
      ensure
        unread_count_display_set: unread_count_display = a_name		
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass OBJS_CHANNEL%N")
        if attached accepted_user as l_accepted_user then
          Result.append ("%Naccepted_user:")
          Result.append (l_accepted_user.out)
          Result.append ("%N")    
        end  
        if attached created as l_created then
          Result.append ("%Ncreated:")
          Result.append (l_created.out)
          Result.append ("%N")    
        end  
        if attached creator as l_creator then
          Result.append ("%Ncreator:")
          Result.append (l_creator.out)
          Result.append ("%N")    
        end  
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")    
        end  
        if attached is_archived as l_is_archived then
          Result.append ("%Nis_archived:")
          Result.append (l_is_archived.out)
          Result.append ("%N")    
        end  
        if attached is_channel as l_is_channel then
          Result.append ("%Nis_channel:")
          Result.append (l_is_channel.out)
          Result.append ("%N")    
        end  
        if attached is_frozen as l_is_frozen then
          Result.append ("%Nis_frozen:")
          Result.append (l_is_frozen.out)
          Result.append ("%N")    
        end  
        if attached is_general as l_is_general then
          Result.append ("%Nis_general:")
          Result.append (l_is_general.out)
          Result.append ("%N")    
        end  
        if attached is_member as l_is_member then
          Result.append ("%Nis_member:")
          Result.append (l_is_member.out)
          Result.append ("%N")    
        end  
        if attached is_moved as l_is_moved then
          Result.append ("%Nis_moved:")
          Result.append (l_is_moved.out)
          Result.append ("%N")    
        end  
        if attached is_mpim as l_is_mpim then
          Result.append ("%Nis_mpim:")
          Result.append (l_is_mpim.out)
          Result.append ("%N")    
        end  
        if attached is_non_threadable as l_is_non_threadable then
          Result.append ("%Nis_non_threadable:")
          Result.append (l_is_non_threadable.out)
          Result.append ("%N")    
        end  
        if attached is_org_shared as l_is_org_shared then
          Result.append ("%Nis_org_shared:")
          Result.append (l_is_org_shared.out)
          Result.append ("%N")    
        end  
        if attached is_pending_ext_shared as l_is_pending_ext_shared then
          Result.append ("%Nis_pending_ext_shared:")
          Result.append (l_is_pending_ext_shared.out)
          Result.append ("%N")    
        end  
        if attached is_private as l_is_private then
          Result.append ("%Nis_private:")
          Result.append (l_is_private.out)
          Result.append ("%N")    
        end  
        if attached is_read_only as l_is_read_only then
          Result.append ("%Nis_read_only:")
          Result.append (l_is_read_only.out)
          Result.append ("%N")    
        end  
        if attached is_shared as l_is_shared then
          Result.append ("%Nis_shared:")
          Result.append (l_is_shared.out)
          Result.append ("%N")    
        end  
        if attached is_thread_only as l_is_thread_only then
          Result.append ("%Nis_thread_only:")
          Result.append (l_is_thread_only.out)
          Result.append ("%N")    
        end  
        if attached last_read as l_last_read then
          Result.append ("%Nlast_read:")
          Result.append (l_last_read.out)
          Result.append ("%N")    
        end  
        if attached latest as l_latest then
          Result.append ("%Nlatest:")
          Result.append (l_latest.out)
          Result.append ("%N")    
        end  
        if attached members as l_members then
          across l_members as ic loop
            Result.append ("%N members:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached name as l_name then
          Result.append ("%Nname:")
          Result.append (l_name.out)
          Result.append ("%N")    
        end  
        if attached name_normalized as l_name_normalized then
          Result.append ("%Nname_normalized:")
          Result.append (l_name_normalized.out)
          Result.append ("%N")    
        end  
        if attached num_members as l_num_members then
          Result.append ("%Nnum_members:")
          Result.append (l_num_members.out)
          Result.append ("%N")    
        end  
        if attached pending_shared as l_pending_shared then
          across l_pending_shared as ic loop
            Result.append ("%N pending_shared:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached previous_names as l_previous_names then
          across l_previous_names as ic loop
            Result.append ("%N previous_names:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached priority as l_priority then
          Result.append ("%Npriority:")
          Result.append (l_priority.out)
          Result.append ("%N")    
        end  
        if attached purpose as l_purpose then
          Result.append ("%Npurpose:")
          Result.append (l_purpose.out)
          Result.append ("%N")    
        end  
        if attached topic as l_topic then
          Result.append ("%Ntopic:")
          Result.append (l_topic.out)
          Result.append ("%N")    
        end  
        if attached unlinked as l_unlinked then
          Result.append ("%Nunlinked:")
          Result.append (l_unlinked.out)
          Result.append ("%N")    
        end  
        if attached unread_count as l_unread_count then
          Result.append ("%Nunread_count:")
          Result.append (l_unread_count.out)
          Result.append ("%N")    
        end  
        if attached unread_count_display as l_unread_count_display then
          Result.append ("%Nunread_count_display:")
          Result.append (l_unread_count_display.out)
          Result.append ("%N")    
        end  
      end
end


